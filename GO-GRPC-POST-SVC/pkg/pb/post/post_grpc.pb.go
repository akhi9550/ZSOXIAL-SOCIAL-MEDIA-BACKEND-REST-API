// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: pkg/pb/post/post.proto

package post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostService_CreatePost_FullMethodName        = "/post.PostService/CreatePost"
	PostService_GetPost_FullMethodName           = "/post.PostService/GetPost"
	PostService_UpdatePost_FullMethodName        = "/post.PostService/UpdatePost"
	PostService_DeletePost_FullMethodName        = "/post.PostService/DeletePost"
	PostService_GetAllPost_FullMethodName        = "/post.PostService/GetAllPost"
	PostService_ArchivePost_FullMethodName       = "/post.PostService/ArchivePost"
	PostService_UnArchivePost_FullMethodName     = "/post.PostService/UnArchivePost"
	PostService_GetAllArchivePost_FullMethodName = "/post.PostService/GetAllArchivePost"
	PostService_LikePost_FullMethodName          = "/post.PostService/LikePost"
	PostService_UnLinkPost_FullMethodName        = "/post.PostService/UnLinkPost"
	PostService_PostComment_FullMethodName       = "/post.PostService/PostComment"
	PostService_SavedPost_FullMethodName         = "/post.PostService/SavedPost"
	PostService_UnSavedPost_FullMethodName       = "/post.PostService/UnSavedPost"
	PostService_GetSavedPost_FullMethodName      = "/post.PostService/GetSavedPost"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error)
	GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error)
	UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error)
	DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error)
	GetAllPost(ctx context.Context, in *GetAllPostRequest, opts ...grpc.CallOption) (*GetAllPostResponse, error)
	ArchivePost(ctx context.Context, in *ArchivePostRequest, opts ...grpc.CallOption) (*ArchivePostResponse, error)
	UnArchivePost(ctx context.Context, in *UnArchivePostrequest, opts ...grpc.CallOption) (*UnArchivePostResponse, error)
	GetAllArchivePost(ctx context.Context, in *GetAllArchivePostRequest, opts ...grpc.CallOption) (*GetAllArchivePostResponse, error)
	LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error)
	UnLinkPost(ctx context.Context, in *UnLikePostRequest, opts ...grpc.CallOption) (*UnLikePostResponse, error)
	PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error)
	SavedPost(ctx context.Context, in *SavedPostRequest, opts ...grpc.CallOption) (*SavedPostResponse, error)
	UnSavedPost(ctx context.Context, in *UnSavedPostRequest, opts ...grpc.CallOption) (*UnSavedPostResponse, error)
	GetSavedPost(ctx context.Context, in *GetSavedPostRequest, opts ...grpc.CallOption) (*GetSavedPostResponse, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) CreatePost(ctx context.Context, in *CreatePostRequest, opts ...grpc.CallOption) (*CreatePostResponse, error) {
	out := new(CreatePostResponse)
	err := c.cc.Invoke(ctx, PostService_CreatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetPost(ctx context.Context, in *GetPostRequest, opts ...grpc.CallOption) (*GetPostResponse, error) {
	out := new(GetPostResponse)
	err := c.cc.Invoke(ctx, PostService_GetPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UpdatePost(ctx context.Context, in *UpdatePostRequest, opts ...grpc.CallOption) (*UpdatePostResponse, error) {
	out := new(UpdatePostResponse)
	err := c.cc.Invoke(ctx, PostService_UpdatePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) DeletePost(ctx context.Context, in *DeletePostRequest, opts ...grpc.CallOption) (*DeletePostResponse, error) {
	out := new(DeletePostResponse)
	err := c.cc.Invoke(ctx, PostService_DeletePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetAllPost(ctx context.Context, in *GetAllPostRequest, opts ...grpc.CallOption) (*GetAllPostResponse, error) {
	out := new(GetAllPostResponse)
	err := c.cc.Invoke(ctx, PostService_GetAllPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) ArchivePost(ctx context.Context, in *ArchivePostRequest, opts ...grpc.CallOption) (*ArchivePostResponse, error) {
	out := new(ArchivePostResponse)
	err := c.cc.Invoke(ctx, PostService_ArchivePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UnArchivePost(ctx context.Context, in *UnArchivePostrequest, opts ...grpc.CallOption) (*UnArchivePostResponse, error) {
	out := new(UnArchivePostResponse)
	err := c.cc.Invoke(ctx, PostService_UnArchivePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetAllArchivePost(ctx context.Context, in *GetAllArchivePostRequest, opts ...grpc.CallOption) (*GetAllArchivePostResponse, error) {
	out := new(GetAllArchivePostResponse)
	err := c.cc.Invoke(ctx, PostService_GetAllArchivePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) LikePost(ctx context.Context, in *LikePostRequest, opts ...grpc.CallOption) (*LikePostResponse, error) {
	out := new(LikePostResponse)
	err := c.cc.Invoke(ctx, PostService_LikePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UnLinkPost(ctx context.Context, in *UnLikePostRequest, opts ...grpc.CallOption) (*UnLikePostResponse, error) {
	out := new(UnLikePostResponse)
	err := c.cc.Invoke(ctx, PostService_UnLinkPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PostComment(ctx context.Context, in *PostCommentRequest, opts ...grpc.CallOption) (*PostCommentResponse, error) {
	out := new(PostCommentResponse)
	err := c.cc.Invoke(ctx, PostService_PostComment_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) SavedPost(ctx context.Context, in *SavedPostRequest, opts ...grpc.CallOption) (*SavedPostResponse, error) {
	out := new(SavedPostResponse)
	err := c.cc.Invoke(ctx, PostService_SavedPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) UnSavedPost(ctx context.Context, in *UnSavedPostRequest, opts ...grpc.CallOption) (*UnSavedPostResponse, error) {
	out := new(UnSavedPostResponse)
	err := c.cc.Invoke(ctx, PostService_UnSavedPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetSavedPost(ctx context.Context, in *GetSavedPostRequest, opts ...grpc.CallOption) (*GetSavedPostResponse, error) {
	out := new(GetSavedPostResponse)
	err := c.cc.Invoke(ctx, PostService_GetSavedPost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error)
	GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error)
	UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error)
	DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error)
	GetAllPost(context.Context, *GetAllPostRequest) (*GetAllPostResponse, error)
	ArchivePost(context.Context, *ArchivePostRequest) (*ArchivePostResponse, error)
	UnArchivePost(context.Context, *UnArchivePostrequest) (*UnArchivePostResponse, error)
	GetAllArchivePost(context.Context, *GetAllArchivePostRequest) (*GetAllArchivePostResponse, error)
	LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error)
	UnLinkPost(context.Context, *UnLikePostRequest) (*UnLikePostResponse, error)
	PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error)
	SavedPost(context.Context, *SavedPostRequest) (*SavedPostResponse, error)
	UnSavedPost(context.Context, *UnSavedPostRequest) (*UnSavedPostResponse, error)
	GetSavedPost(context.Context, *GetSavedPostRequest) (*GetSavedPostResponse, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (UnimplementedPostServiceServer) CreatePost(context.Context, *CreatePostRequest) (*CreatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePost not implemented")
}
func (UnimplementedPostServiceServer) GetPost(context.Context, *GetPostRequest) (*GetPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPost not implemented")
}
func (UnimplementedPostServiceServer) UpdatePost(context.Context, *UpdatePostRequest) (*UpdatePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePost not implemented")
}
func (UnimplementedPostServiceServer) DeletePost(context.Context, *DeletePostRequest) (*DeletePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (UnimplementedPostServiceServer) GetAllPost(context.Context, *GetAllPostRequest) (*GetAllPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllPost not implemented")
}
func (UnimplementedPostServiceServer) ArchivePost(context.Context, *ArchivePostRequest) (*ArchivePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ArchivePost not implemented")
}
func (UnimplementedPostServiceServer) UnArchivePost(context.Context, *UnArchivePostrequest) (*UnArchivePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnArchivePost not implemented")
}
func (UnimplementedPostServiceServer) GetAllArchivePost(context.Context, *GetAllArchivePostRequest) (*GetAllArchivePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllArchivePost not implemented")
}
func (UnimplementedPostServiceServer) LikePost(context.Context, *LikePostRequest) (*LikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LikePost not implemented")
}
func (UnimplementedPostServiceServer) UnLinkPost(context.Context, *UnLikePostRequest) (*UnLikePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnLinkPost not implemented")
}
func (UnimplementedPostServiceServer) PostComment(context.Context, *PostCommentRequest) (*PostCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostComment not implemented")
}
func (UnimplementedPostServiceServer) SavedPost(context.Context, *SavedPostRequest) (*SavedPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SavedPost not implemented")
}
func (UnimplementedPostServiceServer) UnSavedPost(context.Context, *UnSavedPostRequest) (*UnSavedPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnSavedPost not implemented")
}
func (UnimplementedPostServiceServer) GetSavedPost(context.Context, *GetSavedPostRequest) (*GetSavedPostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSavedPost not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_CreatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CreatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CreatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CreatePost(ctx, req.(*CreatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetPost(ctx, req.(*GetPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UpdatePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UpdatePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UpdatePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UpdatePost(ctx, req.(*UpdatePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_DeletePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).DeletePost(ctx, req.(*DeletePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetAllPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetAllPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetAllPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetAllPost(ctx, req.(*GetAllPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_ArchivePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ArchivePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ArchivePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_ArchivePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ArchivePost(ctx, req.(*ArchivePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UnArchivePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnArchivePostrequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UnArchivePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UnArchivePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UnArchivePost(ctx, req.(*UnArchivePostrequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetAllArchivePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllArchivePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetAllArchivePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetAllArchivePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetAllArchivePost(ctx, req.(*GetAllArchivePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_LikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).LikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_LikePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).LikePost(ctx, req.(*LikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UnLinkPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnLikePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UnLinkPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UnLinkPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UnLinkPost(ctx, req.(*UnLikePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PostComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PostComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PostComment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PostComment(ctx, req.(*PostCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_SavedPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SavedPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).SavedPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_SavedPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).SavedPost(ctx, req.(*SavedPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_UnSavedPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnSavedPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).UnSavedPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_UnSavedPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).UnSavedPost(ctx, req.(*UnSavedPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetSavedPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSavedPostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetSavedPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetSavedPost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetSavedPost(ctx, req.(*GetSavedPostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePost",
			Handler:    _PostService_CreatePost_Handler,
		},
		{
			MethodName: "GetPost",
			Handler:    _PostService_GetPost_Handler,
		},
		{
			MethodName: "UpdatePost",
			Handler:    _PostService_UpdatePost_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _PostService_DeletePost_Handler,
		},
		{
			MethodName: "GetAllPost",
			Handler:    _PostService_GetAllPost_Handler,
		},
		{
			MethodName: "ArchivePost",
			Handler:    _PostService_ArchivePost_Handler,
		},
		{
			MethodName: "UnArchivePost",
			Handler:    _PostService_UnArchivePost_Handler,
		},
		{
			MethodName: "GetAllArchivePost",
			Handler:    _PostService_GetAllArchivePost_Handler,
		},
		{
			MethodName: "LikePost",
			Handler:    _PostService_LikePost_Handler,
		},
		{
			MethodName: "UnLinkPost",
			Handler:    _PostService_UnLinkPost_Handler,
		},
		{
			MethodName: "PostComment",
			Handler:    _PostService_PostComment_Handler,
		},
		{
			MethodName: "SavedPost",
			Handler:    _PostService_SavedPost_Handler,
		},
		{
			MethodName: "UnSavedPost",
			Handler:    _PostService_UnSavedPost_Handler,
		},
		{
			MethodName: "GetSavedPost",
			Handler:    _PostService_GetSavedPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/post/post.proto",
}
