// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.3
// source: pkg/pb/post/post.proto

package post

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PostService_ShowPostReports_FullMethodName = "/user.PostService/ShowPostReports"
	PostService_GetAllposts_FullMethodName     = "/user.PostService/GetAllposts"
	PostService_CheckPostIDByID_FullMethodName = "/user.PostService/CheckPostIDByID"
	PostService_RemovePost_FullMethodName      = "/user.PostService/RemovePost"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostServiceClient interface {
	ShowPostReports(ctx context.Context, in *ShowPostReportsRequest, opts ...grpc.CallOption) (*ShowPostReportsResponse, error)
	GetAllposts(ctx context.Context, in *GetAllpostsRequest, opts ...grpc.CallOption) (*GetAllpostsResponse, error)
	CheckPostIDByID(ctx context.Context, in *CheckPostIDByIDRequest, opts ...grpc.CallOption) (*CheckPostIDByIDResponse, error)
	RemovePost(ctx context.Context, in *RemovePostRequest, opts ...grpc.CallOption) (*RemovePostResponse, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) ShowPostReports(ctx context.Context, in *ShowPostReportsRequest, opts ...grpc.CallOption) (*ShowPostReportsResponse, error) {
	out := new(ShowPostReportsResponse)
	err := c.cc.Invoke(ctx, PostService_ShowPostReports_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) GetAllposts(ctx context.Context, in *GetAllpostsRequest, opts ...grpc.CallOption) (*GetAllpostsResponse, error) {
	out := new(GetAllpostsResponse)
	err := c.cc.Invoke(ctx, PostService_GetAllposts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) CheckPostIDByID(ctx context.Context, in *CheckPostIDByIDRequest, opts ...grpc.CallOption) (*CheckPostIDByIDResponse, error) {
	out := new(CheckPostIDByIDResponse)
	err := c.cc.Invoke(ctx, PostService_CheckPostIDByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) RemovePost(ctx context.Context, in *RemovePostRequest, opts ...grpc.CallOption) (*RemovePostResponse, error) {
	out := new(RemovePostResponse)
	err := c.cc.Invoke(ctx, PostService_RemovePost_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility
type PostServiceServer interface {
	ShowPostReports(context.Context, *ShowPostReportsRequest) (*ShowPostReportsResponse, error)
	GetAllposts(context.Context, *GetAllpostsRequest) (*GetAllpostsResponse, error)
	CheckPostIDByID(context.Context, *CheckPostIDByIDRequest) (*CheckPostIDByIDResponse, error)
	RemovePost(context.Context, *RemovePostRequest) (*RemovePostResponse, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPostServiceServer struct {
}

func (UnimplementedPostServiceServer) ShowPostReports(context.Context, *ShowPostReportsRequest) (*ShowPostReportsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPostReports not implemented")
}
func (UnimplementedPostServiceServer) GetAllposts(context.Context, *GetAllpostsRequest) (*GetAllpostsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllposts not implemented")
}
func (UnimplementedPostServiceServer) CheckPostIDByID(context.Context, *CheckPostIDByIDRequest) (*CheckPostIDByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckPostIDByID not implemented")
}
func (UnimplementedPostServiceServer) RemovePost(context.Context, *RemovePostRequest) (*RemovePostResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePost not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_ShowPostReports_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShowPostReportsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).ShowPostReports(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_ShowPostReports_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).ShowPostReports(ctx, req.(*ShowPostReportsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_GetAllposts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllpostsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).GetAllposts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_GetAllposts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).GetAllposts(ctx, req.(*GetAllpostsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_CheckPostIDByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckPostIDByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).CheckPostIDByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_CheckPostIDByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).CheckPostIDByID(ctx, req.(*CheckPostIDByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_RemovePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemovePostRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).RemovePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_RemovePost_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).RemovePost(ctx, req.(*RemovePostRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowPostReports",
			Handler:    _PostService_ShowPostReports_Handler,
		},
		{
			MethodName: "GetAllposts",
			Handler:    _PostService_GetAllposts_Handler,
		},
		{
			MethodName: "CheckPostIDByID",
			Handler:    _PostService_CheckPostIDByID_Handler,
		},
		{
			MethodName: "RemovePost",
			Handler:    _PostService_RemovePost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/post/post.proto",
}
